[1mdiff --git a/src/Framework/App.php b/src/Framework/App.php[m
[1mindex 69b7f0b..b4a56d6 100644[m
[1m--- a/src/Framework/App.php[m
[1m+++ b/src/Framework/App.php[m
[36m@@ -28,18 +28,27 @@[m [mclass App[m
     $this->router->dispatch($path, $method, $this->container);[m
   }[m
 [m
[31m-  public function get(string $path, array $controller)[m
[32m+[m[32m  public function get(string $path, array $controller): App[m
   {[m
     $this->router->add('GET', $path, $controller);[m
[32m+[m
[32m+[m[32m    return $this;[m
   }[m
 [m
[31m-  public function post(string $path, array $controller)[m
[32m+[m[32m  public function post(string $path, array $controller): App[m
   {[m
     $this->router->add('POST', $path, $controller);[m
[32m+[m
[32m+[m[32m    return $this;[m
   }[m
 [m
   public function addMiddleware(string $middleware)[m
   {[m
     $this->router->addMiddleware($middleware);[m
   }[m
[32m+[m
[32m+[m[32m  public function add(string $middleware)[m
[32m+[m[32m  {[m
[32m+[m[32m    $this->router->addRouteMiddleware($middleware);[m
[32m+[m[32m  }[m
 }[m
[1mdiff --git a/src/Framework/Container.php b/src/Framework/Container.php[m
[1mindex 23151fd..17e82ac 100644[m
[1m--- a/src/Framework/Container.php[m
[1m+++ b/src/Framework/Container.php[m
[36m@@ -68,7 +68,7 @@[m [mclass Container[m
     }[m
 [m
     $factory = $this->definitions[$id];[m
[31m-    $dependency = $factory();[m
[32m+[m[32m    $dependency = $factory($this);[m
 [m
     $this->resolved[$id] = $dependency;[m
 [m
[1mdiff --git a/src/Framework/Database.php b/src/Framework/Database.php[m
[1mindex 364fab4..23d044b 100644[m
[1m--- a/src/Framework/Database.php[m
[1m+++ b/src/Framework/Database.php[m
[36m@@ -4,11 +4,12 @@[m [mdeclare(strict_types=1);[m
 [m
 namespace Framework;[m
 [m
[31m-use PDO, PDOException;[m
[32m+[m[32muse PDO, PDOException, PDOStatement;[m
 [m
 class Database[m
 {[m
   private PDO $connection;[m
[32m+[m[32m  private PDOStatement $stmt;[m
 [m
   public function __construct([m
     string $driver,[m
[36m@@ -21,14 +22,35 @@[m [mclass Database[m
     $dsn = "{$driver}:{$config}";[m
 [m
     try {[m
[31m-      $this->connection = new PDO($dsn, $username, $password);[m
[32m+[m[32m      $this->connection = new PDO($dsn, $username, $password, [[m
[32m+[m[32m        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC[m
[32m+[m[32m      ]);[m
     } catch (PDOException $e) {[m
       die("Unable to connect to database");[m
     }[m
   }[m
 [m
[31m-  public function query(string $query)[m
[32m+[m[32m  public function query(string $query, array $params = []): Database[m
   {[m
[31m-    $this->connection->query($query);[m
[32m+[m[32m    $this->stmt = $this->connection->prepare($query);[m
[32m+[m
[32m+[m[32m    $this->stmt->execute($params);[m
[32m+[m
[32m+[m[32m    return $this;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function count()[m
[32m+[m[32m  {[m
[32m+[m[32m    return $this->stmt->fetchColumn();[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function find()[m
[32m+[m[32m  {[m
[32m+[m[32m    return $this->stmt->fetch();[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function id()[m
[32m+[m[32m  {[m
[32m+[m[32m    return $this->connection->lastInsertId();[m
   }[m
 }[m
[1mdiff --git a/src/Framework/Router.php b/src/Framework/Router.php[m
[1mindex dab639b..e0a3d99 100644[m
[1m--- a/src/Framework/Router.php[m
[1m+++ b/src/Framework/Router.php[m
[36m@@ -16,7 +16,8 @@[m [mclass Router[m
     $this->routes[] = [[m
       'path' => $path,[m
       'method' => strtoupper($method),[m
[31m-      'controller' => $controller[m
[32m+[m[32m      'controller' => $controller,[m
[32m+[m[32m      'middlewares' => [][m
     ];[m
   }[m
 [m
[36m@@ -50,7 +51,9 @@[m [mclass Router[m
 [m
       $action = fn () => $controllerInstance->{$function}();[m
 [m
[31m-      foreach ($this->middlewares as $middleware) {[m
[32m+[m[32m      $allMiddleware = [...$route['middlewares'], ...$this->middlewares];[m
[32m+[m
[32m+[m[32m      foreach ($allMiddleware as $middleware) {[m
         $middlewareInstance = $container ?[m
           $container->resolve($middleware) :[m
           new $middleware;[m
[36m@@ -67,4 +70,10 @@[m [mclass Router[m
   {[m
     $this->middlewares[] = $middleware;[m
   }[m
[32m+[m
[32m+[m[32m  public function addRouteMiddleware(string $middleware)[m
[32m+[m[32m  {[m
[32m+[m[32m    $lastRouteKey = array_key_last($this->routes);[m
[32m+[m[32m    $this->routes[$lastRouteKey]['middlewares'][] = $middleware;[m
[32m+[m[32m  }[m
 }[m
[1mdiff --git a/src/Framework/Rules/DateFormatRule.php b/src/Framework/Rules/DateFormatRule.php[m
[1mnew file mode 100644[m
[1mindex 0000000..dbba144[m
[1m--- /dev/null[m
[1m+++ b/src/Framework/Rules/DateFormatRule.php[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace Framework\Rules;[m
[32m+[m
[32m+[m[32muse Framework\Contracts\RuleInterface;[m
[32m+[m
[32m+[m[32mclass DateFormatRule implements RuleInterface[m
[32m+[m[32m{[m
[32m+[m[32m  public function validate(array $data, string $field, array $params): bool[m
[32m+[m[32m  {[m
[32m+[m[32m    $parsedDate = date_parse_from_format($params[0], $data[$field]);[m
[32m+[m
[32m+[m[32m    return $parsedDate['error_count'] === 0 && $parsedDate['warning_count'] === 0;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function getMessage(array $data, string $field, array $params): string[m
[32m+[m[32m  {[m
[32m+[m[32m    return "Invalid date";[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/src/Framework/Rules/LengthMaxRule.php b/src/Framework/Rules/LengthMaxRule.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0636f4f[m
[1m--- /dev/null[m
[1m+++ b/src/Framework/Rules/LengthMaxRule.php[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace Framework\Rules;[m
[32m+[m
[32m+[m[32muse Framework\Contracts\RuleInterface;[m
[32m+[m[32muse InvalidArgumentException;[m
[32m+[m
[32m+[m[32mclass LengthMaxRule implements RuleInterface[m
[32m+[m[32m{[m
[32m+[m[32m  public function validate(array $data, string $field, array $params): bool[m
[32m+[m[32m  {[m
[32m+[m[32m    if (empty($params[0])) {[m
[32m+[m[32m      throw new InvalidArgumentException('Maximum length not specified');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    $length = (int) $params[0];[m
[32m+[m
[32m+[m[32m    return strlen($data[$field]) < $length;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function getMessage(array $data, string $field, array $params): string[m
[32m+[m[32m  {[m
[32m+[m[32m    return "Exceeds maximum character limit of {$params[0]} characters";[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/src/Framework/Rules/NumericRule.php b/src/Framework/Rules/NumericRule.php[m
[1mnew file mode 100644[m
[1mindex 0000000..fb6640b[m
[1m--- /dev/null[m
[1m+++ b/src/Framework/Rules/NumericRule.php[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mnamespace Framework\Rules;[m
[32m+[m
[32m+[m[32muse Framework\Contracts\RuleInterface;[m
[32m+[m
[32m+[m[32mclass NumericRule implements RuleInterface[m
[32m+[m[32m{[m
[32m+[m[32m  public function validate(array $data, string $field, array $params): bool[m
[32m+[m[32m  {[m
[32m+[m[32m    return is_numeric($data[$field]);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function getMessage(array $data, string $field, array $params): string[m
[32m+[m[32m  {[m
[32m+[m[32m    return "Only numbers allowed";[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/src/Framework/Rules/PasswordRule.php b/src/Framework/Rules/PasswordRule.php[m
[1mnew file mode 100644[m
[1mindex 0000000..85fd15c[m
[1m--- /dev/null[m
[1m+++ b/src/Framework/Rules/PasswordRule.php[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m<?php[m
[32m+[m
[32m+[m[32mdeclare(strict_types=1);[m
[32m+[m
[32m+[m[32mnamespace Framework\Rules;[m
[32m+[m
[32m+[m[32muse Framework\Contracts\RuleInterface;[m
[32m+[m
[32m+[m[32mclass PasswordRule implements RuleInterface[m
[32m+[m[32m{[m
[32m+[m[32m  public function validate(array $data, string $field, array $params): bool[m
[32m+[m[32m  {[m
[32m+[m[32m    if (strpos($data[$field], ' ') !== false || strlen($data[$field]) < 8 || !preg_match('/[A-Z]/', $data[$field]) || !preg_match('/[a-z]/', $data[$field]) || !preg_match('/[0-9]/', $data[$field])) {[m
[32m+[m[32m        return (bool) false;[m
[32m+[m[32m    }[m
[32m+[m[32m    return (bool) true;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  public function getMessage(array $data, string $field, array $params): string[m
[32m+[m[32m  {[m
[32m+[m[32m    return "Password must not contain blank spaces and be at least 8 characters long, contain at least 1 uppercase, 1 lowercase letter and 1 digit";[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
